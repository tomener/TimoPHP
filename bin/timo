#!/usr/bin/env php
<?php

namespace Timo\cli;

use Timo\File\File;
use Timo\Helper\Helper;

define('DS', DIRECTORY_SEPARATOR);
define('ROOT_PATH', dirname(dirname(__DIR__)) . DS);
define('FRAME_PATH', dirname(__DIR__) . DS);
define('LIBRARY_PATH', FRAME_PATH . 'src' . DS);
date_default_timezone_set('Asia/Chongqing');

class Tool
{
    protected $command = null;

    protected $params = array();

    private $project_dir = '';
    private $project_path = '';
    private $project_name = '';

    private $commands = [
        '-v' => 'version',
        '-version' => 'version',
        '-c' => 'create',
        '-h' => 'help',
    ];

    public function __construct()
    {
        spl_autoload_register([$this, 'loadClass']);
        $this->parseParams();
    }

    public function run()
    {
        if (!method_exists($this, $this->command)) {
            die("There is an error in the input command\n");
        }

        call_user_func_array(array($this, $this->command), $this->params);
    }

    /**
     * 框架版本号
     */
    public function version()
    {
        echo colorLightBlue('TimoPHP v1.8.9') . PHP_EOL;
    }

    /**
     * 创建一个项目
     *
     * @param string $project_name 项目名
     * @param string $app_name 应用名
     * @param string $app_type 应用类型
     */
    public function create($project_name = '', $app_name = 'api', $app_type = 'api')
    {
        if (empty($project_name)) {
            die("please input project name\n");
        }

        $this->project_dir = ROOT_PATH . $project_name;
        $app_dir = $this->project_dir . DS . 'app' . DS . $app_name;

        if (is_dir($app_dir)) {
            die(colorLightRed("\n>>> Warning: application " . $project_name . '.' . $app_name . " is exists.\n"));
        }

        $this->project_name = $project_name;

        File::mkDir($this->project_dir);

        $this->makeDir($app_name, $app_type);

        $this->makeFile($app_name, $app_type);

        echo "|                                  |\n"
            . "|----------" . colorGreen('Create Success') . "----------|\n"
            . "|                                  |\n"
            . "| Project: " . str_pad($project_name, 24, ' ') . "|\n"
            . "| App name: " . str_pad($app_name, 23, ' ') . "|\n"
            . "| App type: " . str_pad($app_type, 23, ' ') . "|\n"
            . "|                                  |\n"
            . "|----------------------------------|";
    }

    /**
     * 帮助文档
     */
    public function help()
    {
        echo colorLightBlue('Usage') . ":\n\n"
            . " " . colorLightRed('-h') . " help\n"
            . " " . colorLightRed('-c') . " create:\n"
            . "    php bin\\timo -c project_name app_name app_type(web/api)\n"
            . " " . colorLightRed('-v -version') . " version\n";
    }

    /**
     * 创建目录
     *
     * @param $app_name
     * @param $app_type
     */
    private function makeDir($app_name, $app_type)
    {
        $dirs = [
            'app/' . $app_name . '/controller',
            'app/cli/controller',
            'cache',
            'config/dev',
            'config/pro',
            'config/test',
            'lib',
            'logs',
            'model',
            'public/' . $app_name,
        ];

        if ($app_type == 'web') {
            $dirs = array_merge([
                'app/' . $app_name . '/template/default/Index',
                'app/' . $app_name . '/view',
                'public/' . $app_name . '/static/css',
                'public/' . $app_name . '/static/images',
                'public/' . $app_name . '/static/js',
            ], $dirs);
        }

        $this->project_path = $this->project_dir . DS;

        foreach ($dirs as $dir) {
            $dir = $this->project_path . $dir;
            File::mkDir($dir);
        }
    }

    /**
     * 创建文件
     *
     * @param $app_name
     * @param $app_type
     */
    private function makeFile($app_name, $app_type)
    {
        $copies = [
            ['source' => 'db.config.php', 'target' => 'config/dev/db.config.php'],
            ['source' => 'db.config.php', 'target' => 'config/pro/db.config.php'],
            ['source' => 'db.config.php', 'target' => 'config/test/db.config.php'],
        ];
        foreach ($copies as $copy) {
            if (!file_exists($this->project_path . $copy['target'])) {
                copy(FRAME_PATH . 'bin/copy/' . $copy['source'], $this->project_path . $copy['target']);
            }
        }
        $puts = [
            [
                'file' => 'app/' . $app_name . '/controller/Index.php',
                'cont' => $this->getController($app_name, $app_type)
            ],
            [
                'file' => 'app/cli/controller/Test.php',
                'cont' => $this->getController('cli', 'api', 'Test')
            ],
            [
                'file' => 'public/' . $app_name . '/index.php',
                'cont' => $this->getIndex($app_name)
            ],
            [
                'file' => 'public/' . $app_name . '/.htaccess',
                'cont' => $this->getHtAccess()
            ],
            ['file' => 'app/' . $app_name . '/config.php', 'cont' => $this->getAppConfig($app_type)],
            ['file' => 'config/dev/common.config.php', 'cont' => "<?php\r\nreturn [];"],
            ['file' => 'config/pro/common.config.php', 'cont' => "<?php\r\nreturn [];"],
            ['file' => 'config/test/common.config.php', 'cont' => "<?php\r\nreturn [];"],
            ['file' => 'config/env.config.php', 'cont' => $this->getEnvConfig()],
            ['file' => 'cache/index.html', 'cont' => ''],
            ['file' => 'logs/index.html', 'cont' => ''],
            ['file' => 'cli', 'cont' => $this->getCliContent()],
        ];
        if ($app_type == 'web') {
            $puts[] = [
                'file' => 'app/' . $app_name . '/template/default/Index/index.tpl.php',
                'cont' => "<h1>TimoPHP is a Fast Sample Smart MVC+ Framework.</h1>"
            ];
        }
        foreach ($puts as $put) {
            $file = $this->project_path . $put['file'];
            if (!file_exists($file)) {
                file_put_contents($file, $put['cont']);
            }
        }
    }

    private function getController($app_name, $app_type, $controller = 'Index')
    {
        $return_content = $app_type == 'api' ? "'" . $app_name . ".'" . ' . ENV' : '$this->render()';
        $str = <<<EOD
<?php

namespace app\\{$app_name}\controller;

use Timo\Core\Controller;

class {$controller} extends Controller
{
	public function env()
	{
		return {$return_content};
	}
}

EOD;
        return $str;
    }

    function getIndex($app_name)
    {
        $str = <<<EOD
<?php

use Timo\Core\Engine;
use Timo\Exception\CoreException;

define('APP_NAME', '{$app_name}');
define('ROOT_PATH', dirname(dirname(__DIR__)) . DIRECTORY_SEPARATOR);

//require ROOT_PATH . 'vendor/autoload.php';
require ROOT_PATH . '../TimoPHP/boot.php';

\$engine = new Engine();
\$engine->start();

EOD;
        return $str;
    }

    private function getAppConfig($app_type)
    {
        $content = file_get_contents(FRAME_PATH . 'bin/copy/app.config.php');
        $content = str_replace('__TYPE__', $app_type == 'api' ? 'json' : 'html', $content);
        return $content;
    }

    private function getEnvConfig()
    {
        $content = file_get_contents(FRAME_PATH . 'bin/copy/env.config.php');
        $content = str_replace('__RANDOM_16__', Helper::random(16), $content);
        $content = str_replace('__RANDOM_6__', Helper::random(6), $content);
        return $content;
    }

    private function getHtAccess()
    {
        $str = <<<EOD
<IfModule mod_rewrite.c>
  Options +FollowSymlinks
  RewriteEngine On

  RewriteCond %{REQUEST_FILENAME} !-d
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]
</IfModule>
EOD;
        return $str;
    }

    private function getCliContent()
    {
        $content = file_get_contents(FRAME_PATH . 'bin/copy/cli');

        $content = str_replace('__project_name__', $this->project_name, $content);

        return $content;
    }

    private function parseParams()
    {
        global $argv;
        global $argc;
        if ($argc < 2) {
            die("Lack of command parameters\n create project_name\n");
        }

        $this->command = $argv[1];
        if (isset($this->commands[$argv[1]])) {
            $this->command = $this->commands[$argv[1]];
        }

        $this->params = array_slice($argv, 2);
    }

    private function loadClass($class_name)
    {
        $class_name = str_replace('\\', DIRECTORY_SEPARATOR, $class_name);
        $pos = strpos($class_name, DIRECTORY_SEPARATOR);
        $space = substr($class_name, 0, $pos);

        if ($space == 'Timo') {
            $class_name = substr($class_name, $pos + 1);
            $class_file = LIBRARY_PATH . $class_name . '.php';
        } else {
            $class_file = FRAME_PATH . $class_name . '.php';
        }

        if (!file_exists($class_file)) {
            throw new \Exception('class ' . $class_file . ' not found.', 404);
        } else {
            require $class_file;
        }
    }
}

function colorLightRed($str)
{
    return "\033[1;31m" . $str . "\033[0m";
}

function colorLightBlue($str)
{
    return "\033[1;34m" . $str . "\033[0m";
}

function colorGreen($str)
{
    return "\033[0;32m" . $str . "\033[0m";
}

$tool = new Tool();
$tool->run();
